#!/usr/bin/perl

#System Calls
use File::Copy;

#variable declaring
my $tftp_dir="/tftpboot";
my $backupEdge_dir="/tftpboot/edgeBackup/";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
my $log_file ="/tmp/edgeBackup.log.$wday";
my $msg = "Results of Edge Backups:\n\n";
my $date = `/bin/date +"%F"`;
chomp $date;
my $siteTemp = "";
my $switchTemp = "";
my $ipTemp = "";
my $dateTemp = "";
my $switchesProcessed = 0;

#FileName Variables
my $destFileName = "";
my $sourceFileName = "";

#Open the log file. This will overwrite the last log file
#Sunday is 0
#Monday is 1
#Tuesday is 2
#Wedneday is 3
#Thursday is 4
#Friday is 5
#Saturday is 6
open(LOG, ">$log_file");

#Open the backup Directory
opendir(DH, "$tftp_dir");
#Read the files in the directory
my @files = readdir(DH);
#Close the directory
closedir(DH);

#This will loop through every file in the directory. Non recursive.
foreach my $file (@files)
{
        #Skip . and ..
        next if($file =~ /^\.$/);
        next if($file =~ /^\.\.$/);

        #Skip files that are directories, and do not match the names that we're looking for
        #This will skip anything that isn't in this format:
        #ascii_[...]edge[...].cfg
        next if($file =~ /^((?!ascii_.*edge.*.cfg).)*$/);

        #$file is the file used on this iteration of the loop
        print LOG "Working on this file now: \n\t$file\n";
        $msg .= "Working on this file now: \n\t$file\n";

        #Set Source Filename
        $sourceFileName = "$tftp_dir/$file";

        $file =~ /([a-zA-Z0-9]{2}-[0-9]{2})\.([0-9]{1,3})_(([0-9]{1,3}\.){3}([0-9]{1,3}))_([0-9]{4}\-[0-9]{2}\-[0-9]{2})/;
        $siteTemp = "$1";
        $switchTemp = "$2";
        $ipTemp = "$3";
        $dateTemp = "$6";

        print LOG "\tFile is an Edge Switch.\n";
        $msg .= "\tFile is a Edge Switch.\n";
        #Generate the destination filename
        $destFileName = "$backupEdge_dir";

        #Append SiteTemp
        $destFileName .= "$siteTemp.$switchTemp/";

        #Check if the directory exists. Else, make the directory
        if (-d "$destFileName") {
                print LOG "\tDirectory ($destFileName) exists\n";
                $msg .= "\tDirectory ($destFileName) exists\n";
        }
        else {
                print LOG "\tMaking Directory ($destFileName)\n";
                $msg .= "\tMaking Directory ($destFileName)\n";
                
                #make the directory, as it doesn't exist
                mkdir( $destFileName ) or warn "\tWARN:Couldn't create $destFileName directory. Already Exists, $!";
        }

        #build the rest of the filename
        $destFileName .= "$dateTemp-$siteTemp.$switchTemp-$ipTemp.cfg";

        print LOG "\tMoving $sourceFileName --> $destFileName\n";
        $msg .= "\tMoving $sourceFileName --> $destFileName\n";

        move( $sourceFileName,$destFileName ) or warn "\tWARN:Couldn't move the file $destFileName, $!";

        if (-e "$destFileName") {
                print LOG "\tMove complete\n\n";
                $msg .= "\tMove complete\n\n";
        }
        else {
                print LOG "\tERROR: Move failed. Investigate\n\n";
                $msg .= "\tERROR: Move failed. Investigate\n\n";
        }

        #Increament Switches Processed
        $switchesProcessed++;
}

#send mail informing of backup failure
if ( $switchesProcessed >= 1 ) {
        my @rcpts = ("emails@test.test");
        $msg .= "\n\n(This message was generated by edgeBackup.pl on server)";
        foreach (@rcpts) {
                #send mail informing of backup failure
                if ($msg =~ /ERROR:/){
                        open(MAIL,"|mail -s 'ERROR while processing switch backups' $_");
                }
                else {
                        open(MAIL,"|mail -s 'Report for edge switch backup processing' $_");
                }
        print MAIL "$msg";
        close (MAIL);
        }
}

close(LOG);
